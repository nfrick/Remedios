//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataLayer
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RemediosEntities : DbContext
    {
        public RemediosEntities()
            : base("name=RemediosEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Principio> Principios { get; set; }
        public virtual DbSet<Remedio> Remedios { get; set; }
        public virtual DbSet<Categoria> Categorias { get; set; }
        public virtual DbSet<Indicacao> Indicacoes { get; set; }
        public virtual DbSet<ClasseTerapeutica> ClasseTerapeuticas { get; set; }
        public virtual DbSet<Laboratorio> Laboratorios { get; set; }
        public virtual DbSet<PrincipioAtivo> PrincipiosAtivos { get; set; }
        public virtual DbSet<Produto> Produtos { get; set; }
        public virtual DbSet<AnvisaRemedio> AnvisaRemedios { get; set; }
        public virtual DbSet<Tarja> Tarjas { get; set; }
        public virtual DbSet<TipoDeProduto> TiposDeProdutos { get; set; }
    
        public virtual ObjectResult<string> spCategorias()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spCategorias");
        }
    
        public virtual ObjectResult<string> spIndicacoes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spIndicacoes");
        }
    
        public virtual ObjectResult<Remedio> spRemedios(Nullable<int> qtd, Nullable<bool> humano, Nullable<bool> vet, string cats, string inds, string prins)
        {
            var qtdParameter = qtd.HasValue ?
                new ObjectParameter("qtd", qtd) :
                new ObjectParameter("qtd", typeof(int));
    
            var humanoParameter = humano.HasValue ?
                new ObjectParameter("humano", humano) :
                new ObjectParameter("humano", typeof(bool));
    
            var vetParameter = vet.HasValue ?
                new ObjectParameter("vet", vet) :
                new ObjectParameter("vet", typeof(bool));
    
            var catsParameter = cats != null ?
                new ObjectParameter("cats", cats) :
                new ObjectParameter("cats", typeof(string));
    
            var indsParameter = inds != null ?
                new ObjectParameter("inds", inds) :
                new ObjectParameter("inds", typeof(string));
    
            var prinsParameter = prins != null ?
                new ObjectParameter("prins", prins) :
                new ObjectParameter("prins", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Remedio>("spRemedios", qtdParameter, humanoParameter, vetParameter, catsParameter, indsParameter, prinsParameter);
        }
    
        public virtual ObjectResult<Remedio> spRemedios(Nullable<int> qtd, Nullable<bool> humano, Nullable<bool> vet, string cats, string inds, string prins, MergeOption mergeOption)
        {
            var qtdParameter = qtd.HasValue ?
                new ObjectParameter("qtd", qtd) :
                new ObjectParameter("qtd", typeof(int));
    
            var humanoParameter = humano.HasValue ?
                new ObjectParameter("humano", humano) :
                new ObjectParameter("humano", typeof(bool));
    
            var vetParameter = vet.HasValue ?
                new ObjectParameter("vet", vet) :
                new ObjectParameter("vet", typeof(bool));
    
            var catsParameter = cats != null ?
                new ObjectParameter("cats", cats) :
                new ObjectParameter("cats", typeof(string));
    
            var indsParameter = inds != null ?
                new ObjectParameter("inds", inds) :
                new ObjectParameter("inds", typeof(string));
    
            var prinsParameter = prins != null ?
                new ObjectParameter("prins", prins) :
                new ObjectParameter("prins", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Remedio>("spRemedios", mergeOption, qtdParameter, humanoParameter, vetParameter, catsParameter, indsParameter, prinsParameter);
        }
    
        public virtual ObjectResult<CategoriaRemedio> spCategoriasRemedios()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CategoriaRemedio>("spCategoriasRemedios");
        }
    
        public virtual ObjectResult<PrincipioRemedio> spPrincipiosRemedios()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PrincipioRemedio>("spPrincipiosRemedios");
        }
    }
}
